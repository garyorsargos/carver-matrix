package com.fmc.starterApp.models.entity;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.Setter;
import lombok.ToString;

import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.persistence.Transient;

/**
 * Represents a Carver Matrix, which aggregates multiple {@link CarverItem} objects and defines
 * access and scoring configurations for those items.
 *
 * <p>This entity is mapped to the "carver_matrices" table and contains metadata and configuration
 * details for a matrix. It is associated with a {@link User2} entity, though this association may be
 * deprecated in the future since matrices are primarily found through the host and participant email lists.
 *
 * <p><strong>Key Fields:</strong>
 * <ul>
 *   <li>{@code matrixId} - The unique identifier for the matrix, auto-generated by the database.</li>
 *   <li>{@code user} - The {@link User2} associated with this matrix. This field is mandatory but may be deprecated
 *       in favor of host and participant email lookups.</li>
 *   <li>{@code name} - The name of the matrix. This field is mandatory and is limited to 100 characters.</li>
 *   <li>{@code description} - A detailed description of the matrix, allowing for a thorough explanation,
 *       limited to 1000 characters.</li>
 *   <li>{@code createdAt} - The timestamp when the matrix was created.</li>
 *   <li>{@code hosts} - An array of host email addresses. Hosts can edit all aspects of the matrix except the carver values of items.
 *       A person may be both a host and a participant.</li>
 *   <li>{@code participants} - An array of participant email addresses. Participants are allowed only to edit the carver values of items.
 *       A person may be in both lists.</li>
 *   <li>{@code items} - A list of {@link CarverItem} objects that belong to this matrix.</li>
 *   <li>Multiplier fields ({@code cMulti}, {@code aMulti}, {@code rMulti}, {@code vMulti}, {@code eMulti}, {@code r2Multi}) represent
 *       the weightings for the corresponding carver values found in {@link CarverItem}.</li>
 *   <li>{@code randomAssignment} - If enabled, participants will be randomly assigned to {@link CarverItem} objects.</li>
 *   <li>{@code roleBased} - If enabled, every user is treated as both a participant and a host.</li>
 *   <li>{@code fivePointScoring} - A toggle that selects a 5-point scoring system; if disabled, a 10-point scoring system is used.</li>
 * </ul>
 *
 * <p><strong>Bidirectional Relationship:</strong>
 * The methods {@code addItem(CarverItem item)} and {@code removeItem(CarverItem item)} ensure that when items are added or removed,
 * the association is updated on both sides.
 * </p>
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Entity
@Table(name = "carver_matrices")
public class CarverMatrix {

    /**
     * The unique identifier for the matrix.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long matrixId;

    /**
     * The {@link User2} associated with this matrix.
     * <p>This field links the matrix to its owner or creator and is mandatory.
     * It may be deprecated in the future since matrices are primarily found via host and participant email lists.</p>
     */
    @ManyToOne(optional = true)
    @JoinColumn(name = "user_id", nullable = true)
    @OnDelete(action = OnDeleteAction.SET_NULL)
    private User2 user;

    /**
     * The name of the matrix.
     * <p>This field is mandatory and limited to 100 characters.</p>
     */
    @NonNull
    @Column(nullable = false, length = 100)
    private String name;

    /**
     * A detailed description of the matrix.
     * <p>This field is optional but is limited to 1000 characters to allow for a thorough description.</p>
     */
    @Column(length = 1000)
    private String description;

    /**
     * The timestamp when the matrix was created.
     */
    @Column(name = "created_at", columnDefinition = "TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
    private LocalDateTime createdAt = LocalDateTime.now();

    /**
     * An array of host email addresses associated with the matrix.
     * <p>Hosts have full editing permissions except for modifying the carver values of items.
     * A person may be included as both a host and a participant.</p>
     */
    @Column
    private String[] hosts = new String[0];;

    /**
     * An array of participant email addresses associated with the matrix.
     * <p>Participants are allowed only to edit the carver values of items.
     * A person may be included as both a host and a participant.</p>
     */
    @Column
    private String[] participants = new String[0];;

    /**
     * The list of {@link CarverItem} objects associated with this matrix.
     * <p>This one-to-many relationship represents the individual items grouped under this matrix.
     * Cascade operations and orphan removal are enabled to maintain referential integrity.</p>
     */
    @OneToMany(mappedBy = "carverMatrix", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<CarverItem> items = new ArrayList<>();

    /**
     * Multiplier for the carver value corresponding to criticality in {@link CarverItem}.
     */
    @JsonProperty("cMulti")
    private Double cMulti;

    /**
     * Multiplier for the carver value corresponding to accessibility in {@link CarverItem}.
     */
    @JsonProperty("aMulti")
    private Double aMulti;

    /**
     * Multiplier for the carver value corresponding to recoverability in {@link CarverItem}.
     */
    @JsonProperty("rMulti")
    private Double rMulti;

    /**
     * Multiplier for the carver value corresponding to vulnerability in {@link CarverItem}.
     */
    @JsonProperty("vMulti")
    private Double vMulti;

    /**
     * Multiplier for the carver value corresponding to effect in {@link CarverItem}.
     */
    @JsonProperty("eMulti")
    private Double eMulti;

    /**
     * Multiplier for the carver value corresponding to recognizability in {@link CarverItem}.
     */
    @JsonProperty("r2Multi")
    private Double r2Multi;

    /**
     * If enabled, participants are randomly assigned to {@link CarverItem} objects.
     */
    private Boolean randomAssignment;

    /**
     * If enabled, every user is treated as both a participant and a host.
     */
    private Boolean roleBased;

    /**
     * A toggle to select a 5-point scoring system; if disabled, a 10-point scoring system is used.
     */
    private Boolean fivePointScoring;

    /**
     * Adds a {@link CarverItem} to the matrix and sets this matrix as the item's parent.
     * This method maintains the bidirectional relationship between {@link CarverMatrix} and {@link CarverItem}.
     *
     * @param item the {@link CarverItem} to add.
     */
    public void addItem(CarverItem item) {
        if (item != null && !items.contains(item)) {
            items.add(item);
            item.setCarverMatrix(this);
        }
    }

    /**
     * Removes a {@link CarverItem} from the matrix and dissociates it.
     * This method maintains the bidirectional relationship between {@link CarverMatrix} and {@link CarverItem}.
     *
     * @param item the {@link CarverItem} to remove.
     */
    public void removeItem(CarverItem item) {
        if (item != null && items.contains(item)) {
            items.remove(item);
            item.setCarverMatrix(null);
        }
    }

    @Transient
    @JsonProperty("images")
    private List<Map<String, Object>> images;
}
