package com.fmc.starterApp.models.entity;

import java.time.LocalDateTime;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.persistence.MapKeyColumn;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.CollectionTable;
import jakarta.persistence.Transient;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.NonNull;
import org.hibernate.annotations.JdbcTypeCode;
import org.hibernate.type.SqlTypes;

/**
 * Represents an item within a Carver Matrix.
 *
 * <p>This entity is mapped to the "carver_items" table and stores detailed information about an item
 * that is part of a Carver Matrix. Each CarverItem is associated with a specific {@link CarverMatrix}
 * via a many-to-one relationship.
 *
 * <p><strong>Key Fields:</strong>
 * <ul>
 *   <li>{@code itemId} - The unique identifier for the item, auto-generated by the database.</li>
 *   <li>{@code carverMatrix} - The associated {@link CarverMatrix} to which this item belongs. This field is now nullable
 *       to allow disassociation when removing an item.</li>
 *   <li>{@code itemName} - The name of the item. This field is mandatory and is restricted to a maximum length of 100 characters.</li>
 *   <li>Other metric fields like {@code criticality}, {@code accessibility}, {@code recoverability},
 *       {@code vulnerability}, {@code effect}, and {@code recognizability} describe various attributes of the item.</li>
 *   <li>{@code targetUsers} - An array of target user identifiers associated with the item.</li>
 *   <li>{@code createdAt} - The timestamp when the item was created. Automatically set to the current timestamp.</li>
 * </ul>
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Entity
@Table(name = "carver_items")
public class CarverItem {

    /**
     * The unique identifier for the item.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long itemId;

    /**
     * The {@link CarverMatrix} to which this item belongs.
     * <p>This association is now nullable to allow for disassociation (e.g., during removal) without throwing a NullPointerException.
     * The {@code @JsonIgnore} annotation prevents this field from being serialized into JSON to avoid circular references.</p>
     */
    @ManyToOne
    @JoinColumn(name = "matrix_id", nullable = true)
    @JsonIgnore
    private CarverMatrix carverMatrix;

    /**
     * The name of the item.
     * <p>This field is mandatory and has a maximum length of 100 characters.</p>
     */
    @NonNull
    @Column(name = "item_name", nullable = false, length = 100)
    private String itemName;

    @JdbcTypeCode(SqlTypes.JSON)
    // @Column(columnDefinition = "jsonb")
    private Map<String, Integer> criticality = new HashMap<>();

    @JdbcTypeCode(SqlTypes.JSON)
    // @Column(columnDefinition = "jsonb")
    private Map<String, Integer> accessibility = new HashMap<>();

    @JdbcTypeCode(SqlTypes.JSON)
    // @Column(columnDefinition = "jsonb")
    private Map<String, Integer> recoverability = new HashMap<>();

    @JdbcTypeCode(SqlTypes.JSON)
    // @Column(columnDefinition = "jsonb")
    private Map<String, Integer> vulnerability = new HashMap<>();

    @JdbcTypeCode(SqlTypes.JSON)
    // @Column(columnDefinition = "jsonb")
    private Map<String, Integer> effect = new HashMap<>();

    @JdbcTypeCode(SqlTypes.JSON)
    // @Column(columnDefinition = "jsonb")
    private Map<String, Integer> recognizability = new HashMap<>();

    /**
     * An array of target user identifiers associated with the item.
     */
    // @Column(columnDefinition = "TEXT[]")
    @Column
    @JdbcTypeCode(SqlTypes.ARRAY)
    @JsonProperty("targetUsers")
    private String[] targetUsers = new String[0];

    @Transient
    @JsonProperty("images")
    private List<String> base64Images;

    /**
     * The timestamp when the item was created.
     */
    @Column(name = "created_at", columnDefinition = "TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
    private LocalDateTime createdAt = LocalDateTime.now();
}
